<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:language="clr-namespace:MicrowaveConverter.Resources.Language"
             xmlns:models="clr-namespace:MicrowaveConverter.Models"
             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             x:Class="MicrowaveConverter.Views.MainPage">

    <ScrollView>
        <VerticalStackLayout Padding="20"
                             VerticalOptions="Center"
                             HorizontalOptions="Center">

            <!-- 
                In the following, the original wattage, the original time and the target wattage are requested from the user in separate steps.
                Afterwards, the target wattage is shown to the user.
            -->
            
            <!-- Original wattage -->
            <VerticalStackLayout Padding="20" 
                                 IsVisible="{Binding CurrentStep, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter={x:Static models:AppStep.OriginalWattage}}">
                <Label Text="{x:Static language:Strings.OriginalWattageQuestion}"
                       Style="{StaticResource LabelHeader}"></Label>

                <Entry Text="{Binding InputOriginalWattage}"
                       Keyboard="Numeric">
                    <Entry.Triggers>
                        <!-- Show invalid input -->
                        <DataTrigger TargetType="Entry" Binding="{Binding IsValidInputOriginalWattage}" Value="False">
                            <Setter Property="TextColor" Value="Red"></Setter>
                        </DataTrigger>
                    </Entry.Triggers>
                    <Entry.Behaviors>
                        <!-- Update the ViewModel after each input -->
                        <toolkit:EventToCommandBehavior
                            EventName="TextChanged"
                            Command="{Binding UpdateAfterInputCommand}" />
                    </Entry.Behaviors>
                </Entry>

                <Button Text="{x:Static language:Strings.Continue}"
                        Command="{Binding ContinueFromOriginalWattageCommand}"
                        Style="{StaticResource Button}" />
            </VerticalStackLayout>
        
            <!-- Original time -->
            <VerticalStackLayout Padding="20"
                                 IsVisible="{Binding CurrentStep, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter={x:Static models:AppStep.OriginalTime}}">
                <Label Text="{x:Static language:Strings.OriginalTimeQuestion}"
                       Style="{StaticResource LabelHeader}"></Label>

                <Entry Text="{Binding InputOriginalTime, StringFormat='{0:m\\:ss}'}">
                    <Entry.Triggers>
                        <!-- Show invalid input -->
                        <DataTrigger TargetType="Entry" Binding="{Binding IsValidInputOriginalTime}" Value="False">
                            <Setter Property="TextColor" Value="Red"></Setter>
                        </DataTrigger>
                    </Entry.Triggers>
                    <Entry.Behaviors>
                        <!-- Update the ViewModel after each input -->
                        <toolkit:EventToCommandBehavior
                            EventName="TextChanged"
                            Command="{Binding UpdateAfterInputCommand}" />
                    </Entry.Behaviors>
                </Entry>

                <Button Text="{x:Static language:Strings.Continue}"
                        Command="{Binding ContinueFromOriginalTimeCommand}"
                        Style="{StaticResource Button}" />
            </VerticalStackLayout>
            
            <!-- Target wattage -->
            <VerticalStackLayout Padding="20"
                                 IsVisible="{Binding CurrentStep, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter={x:Static models:AppStep.TargetWattage}}">
                <Label Text="{x:Static language:Strings.TargetWattageQuestion}"
                       Style="{StaticResource LabelHeader}"></Label>

                <Entry Text="{Binding InputTargetWattage}"
                       Keyboard="Numeric">
                    <Entry.Triggers>
                        <!-- Show invalid input -->
                        <DataTrigger TargetType="Entry" Binding="{Binding IsValidInputTargetWattage}" Value="False">
                            <Setter Property="TextColor" Value="Red"></Setter>
                        </DataTrigger>
                    </Entry.Triggers>
                    <Entry.Behaviors>
                        <!-- Update the ViewModel after each input -->
                        <toolkit:EventToCommandBehavior
                            EventName="TextChanged"
                            Command="{Binding UpdateAfterInputCommand}" />
                    </Entry.Behaviors>
                </Entry>

                <Button Text="{x:Static language:Strings.Continue}"
                        Command="{Binding ContinueFromTargetWattageCommand}"
                        Style="{StaticResource Button}" />
            </VerticalStackLayout>

            <!-- 
                In the following, the original wattage, the original time and the target wattage and the computed target time are shown as readonly fields
                so that the user can see their input and the result of the computation.
            -->

            <VerticalStackLayout Padding="20"
                                 IsVisible="{Binding CurrentStep, Converter={StaticResource EqualsToVisibilityConverter}, ConverterParameter={x:Static models:AppStep.TargetTime}}">
                <!-- Original wattage -->
                <VerticalStackLayout>
                    <Label Text="{x:Static language:Strings.OriginalWattage}"
                           Style="{StaticResource LabelHeader}"></Label>

                    <Entry Text="{Binding InputOriginalWattage}"
                           IsEnabled="False"></Entry>
                </VerticalStackLayout>

                <!-- Original time -->
                <VerticalStackLayout>
                    <Label Text="{x:Static language:Strings.OriginalTime}"
                           Style="{StaticResource LabelHeader}"></Label>

                    <Entry Text="{Binding InputOriginalTime, StringFormat='{0:m\\:ss}'}"
                           IsEnabled="False"></Entry>
                </VerticalStackLayout>

                <!-- Target wattage -->
                <VerticalStackLayout>
                    <Label Text="{x:Static language:Strings.TargetWattage}"
                           Style="{StaticResource LabelHeader}"></Label>

                    <Entry Text="{Binding InputTargetWattage}"
                           IsEnabled="False"></Entry>
                </VerticalStackLayout>

                <!-- Target time -->
                <VerticalStackLayout>
                    <Label Text="{x:Static language:Strings.TargetTime}"
                           Style="{StaticResource LabelHeader}"></Label>

                    <Entry Text="{Binding OutputTargetTime, StringFormat='{0:m\\:ss}'}"
                           IsEnabled="False"></Entry>
                </VerticalStackLayout>

                <!-- Restart the app flow -->
                <Button Text="{x:Static language:Strings.Restart}"
                        Command="{Binding RestartCommand}"
                        Style="{StaticResource Button}" />
                
            </VerticalStackLayout>
            
        </VerticalStackLayout>
    </ScrollView>

</ContentPage>
