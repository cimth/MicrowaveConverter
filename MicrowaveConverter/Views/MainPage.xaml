<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:language="clr-namespace:MicrowaveConverter.Resources.Language"
             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             x:Class="MicrowaveConverter.Views.MainPage">

    <ScrollView>
        <VerticalStackLayout Padding="20">
            
            <!-- Original wattage -->
            <VerticalStackLayout Padding="20">
                <Label Text="{x:Static language:Strings.OriginalWattage}"
                       Style="{StaticResource LabelHeader}"></Label>

                <Entry Text="{Binding InputOriginalWattage}"
                       Keyboard="Numeric">
                    <Entry.Triggers>
                        <!-- Show invalid input -->
                        <DataTrigger TargetType="Entry" Binding="{Binding IsValidInputOriginalWattage}" Value="False">
                            <Setter Property="TextColor" Value="Red"></Setter>
                        </DataTrigger>
                    </Entry.Triggers>
                    <Entry.Behaviors>
                        <!-- Update the ViewModel after each input -->
                        <toolkit:EventToCommandBehavior
                            EventName="TextChanged"
                            Command="{Binding UpdateAfterInputCommand}" />
                    </Entry.Behaviors>
                </Entry>
            </VerticalStackLayout>
        
            <!-- Original time -->
            <VerticalStackLayout Padding="20">
                <Label Text="{x:Static language:Strings.OriginalTime}"
                       Style="{StaticResource LabelHeader}"></Label>

                <Entry Text="{Binding InputOriginalTime, StringFormat='{0:m\\:ss}'}">
                    <Entry.Triggers>
                        <!-- Show invalid input -->
                        <DataTrigger TargetType="Entry" Binding="{Binding IsValidInputOriginalTime}" Value="False">
                            <Setter Property="TextColor" Value="Red"></Setter>
                        </DataTrigger>
                    </Entry.Triggers>
                    <Entry.Behaviors>
                        <!-- Update the ViewModel after each input -->
                        <toolkit:EventToCommandBehavior
                            EventName="TextChanged"
                            Command="{Binding UpdateAfterInputCommand}" />
                    </Entry.Behaviors>
                </Entry>
            </VerticalStackLayout>
            
            <!-- Target wattage -->
            <VerticalStackLayout Padding="20">
                <Label Text="{x:Static language:Strings.TargetWattage}"
                       Style="{StaticResource LabelHeader}"></Label>

                <Entry Text="{Binding InputTargetWattage}"
                       Keyboard="Numeric">
                    <Entry.Triggers>
                        <!-- Show invalid input -->
                        <DataTrigger TargetType="Entry" Binding="{Binding IsValidInputTargetWattage}" Value="False">
                            <Setter Property="TextColor" Value="Red"></Setter>
                        </DataTrigger>
                    </Entry.Triggers>
                    <Entry.Behaviors>
                        <!-- Update the ViewModel after each input -->
                        <toolkit:EventToCommandBehavior
                            EventName="TextChanged"
                            Command="{Binding UpdateAfterInputCommand}" />
                    </Entry.Behaviors>
                </Entry>
            </VerticalStackLayout>
            
            <!-- Target time -->
            <VerticalStackLayout Padding="20">
                <Label Text="{x:Static language:Strings.TargetTime}"
                       Style="{StaticResource LabelHeader}"></Label>

                <Entry Text="{Binding OutputTargetTime, StringFormat='{0:m\\:ss}'}"
                       IsEnabled="False"></Entry>
            </VerticalStackLayout>
            
        </VerticalStackLayout>
    </ScrollView>

</ContentPage>
